{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, \" Hello \");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/Users/fayzulla/Dev/kadastr/frontend/kadastr/src/components/FormH03.vue"],"sourcesContent":["<template>\n  <div>\n    Hello\n  </div>\n</template>\n<script>\n    export default {\n  name: \"FormH03\",\n  props: [\"deposit_id\", \"mine_area_id\", \"component_id\"],\n  data() {\n    return {\n      description: \"\",\n      selected_H01: false,\n      selected_H02: false,\n      selected_H03: true,\n      depositInfo: {},\n      mineAreaInfo: {},\n      dev: \"\",\n      depositDesc: this.description,\n      district: \"\",\n      area: \"\",\n    };\n  },\n  methods: {\n    selectTab(tab) {\n        if (tab == \"H03\") {\n        this.selected_title = false;\n        this.selected_H01 = false;\n        this.selected_H02 = false;\n        this.selected_H03 = true;\n        this.selected_H04 = false;\n        this.selected_H05 = false;\n        this.selected_H06 = false;\n        this.selected_H07 = false;\n        this.selected_H08 = false;\n        this.selected_H0910 = false;\n        this.selected_H11 = false;\n        this.selected_H12 = false;\n        this.selected_H13 = false;\n      }\n    },\n    selectDeposit() {\n      this.$emit(\"reselect\", {});\n    },\n    getArea(id) {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_area/\";\n      axios.post(url, { id_area: id }, { headers }).then((response) => {\n        if (!response.data[0].auth_fail) {\n          this.area = response.data[0].result.area_name;\n        }\n      });\n    },\n    getDistrict(id_area, id_district) {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_district/\";\n      axios\n        .post(url, { id_area: id_area, id_district: id_district }, { headers })\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            this.district = response.data[0].result.district_name;\n          }\n        });\n    },\n    getComponent() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_dictionary_item_description/\";\n      axios\n        .post(url, { id: this.component_id }, { headers })\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            this.component = response.data[0].result.description;\n          }\n        });\n    },\n    getLandTypes() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_dictionary_contents/\";\n      axios\n        .post(\n          url,\n          { category: \"SPR_TIP_ZEMEL\", limit: 10000, offset: 0 },\n          { headers }\n        )\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            this.land_type = response.data[0].result;\n          }\n        });\n    },\n    getReliefType() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_dictionary_contents/\";\n      axios\n        .post(\n          url,\n          { category: \"SPR_TIP_RELEFA\", limit: 10000, offset: 0 },\n          { headers }\n        )\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            this.relief = response.data[0].result;\n          }\n        });\n    },\n    getAvalanchType() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_dictionary_contents/\";\n      axios\n        .post(\n          url,\n          { category: \"SPR_OPOLZNEOPASNOST\", limit: 10000, offset: 0 },\n          { headers }\n        )\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            this.avalanch_score = response.data[0].result;\n          }\n        });\n    },\n    getMudflowType() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_dictionary_contents/\";\n      axios\n        .post(\n          url,\n          { category: \"SPR_SELEOPASNOST\", limit: 10000, offset: 0 },\n          { headers }\n        )\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            this.drought_score = response.data[0].result;\n          }\n        });\n    },\n    getOrganizations() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_dictionary_contents/\";\n      axios\n        .post(\n          url,\n          { category: \"SPR_VED\", limit: 10000, offset: 0 },\n          { headers }\n        )\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            this.organizations = response.data[0].result;\n          }\n        });\n    },\n    getDevStatus(id) {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_dictionary_item_description/\";\n      axios.post(url, { id: id }, { headers }).then((response) => {\n        if (!response.data[0].auth_fail) {\n          this.dev = response.data[0].result.description;\n        }\n      });\n    },\n    getDepositInfo() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_deposit/\";\n      axios\n        .post(url, { deposit_id: this.deposit_id }, { headers })\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            //alert(JSON.stringify(response.data[0]))\n            if (this.deposit_id == this.mine_area_id) {\n              this.description = response.data[0].result.deposit_name;\n              this.deposit = response.data[0].result.deposit_name;\n              this.mineArea = \"-\";\n              this.depositInfo = response.data[0].result;\n              this.getDevStatus(this.depositInfo.dev_id);\n              this.getArea(this.depositInfo.area_id);\n              this.getDistrict(\n                this.depositInfo.area_id,\n                this.depositInfo.district_id\n              );\n              this.saveOrUpdateProtocol();\n            } else {\n              this.description = response.data[0].result.deposit_name;\n              this.deposit = response.data[0].result.deposit_name;\n              this.depositInfo = response.data[0].result;\n              this.getMineAreaInfo();\n            }\n          }\n        });\n    },\n    getMineAreaInfo() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/get_mine_area/\";\n      axios\n        .post(\n          url,\n          { deposit_id: this.deposit_id, mine_area_id: this.mine_area_id },\n          { headers }\n        )\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            //alert(JSON.stringify(response.data[0].result))\n            this.description += \", \" + response.data[0].result.mine_area_name;\n            this.mineArea = response.data[0].result.mine_area_name;\n            this.mineAreaInfo = response.data[0].result;\n            this.getDevStatus(this.mineAreaInfo.dev_id);\n            this.getDistrict(\n              this.mineAreaInfo.area_id,\n              this.mineAreaInfo.district_id\n            );\n            this.saveOrUpdateProtocol();\n          }\n        });\n    },\n    saveOrUpdateProtocol() {\n      const token = sessionStorage.getItem(\"token\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      };\n      const url = this.$BASE_URL + \"/api/create_or_ignore_general_info/\";\n      axios\n        .post(\n          url,\n          {\n            deposit_id: this.deposit_id,\n            mine_area_id: this.mine_area_id,\n            component_id: this.component_id,\n          },\n          { headers }\n        )\n        .then((response) => {\n          if (!response.data[0].auth_fail) {\n            console.log(response.data[0].auth_fail);\n          }\n        });\n    },\n    hideErrorMessage() {\n      this.showError = false;\n    }  \n}\n}\n</script>\n"],"mappings":";;uBACEA,mBAAA,CAEM,aAFD,SAEL"},"metadata":{},"sourceType":"module","externalDependencies":[]}